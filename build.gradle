import nu.studer.gradle.jooq.JooqEdition
import org.gradle.api.services.BuildService
import org.gradle.api.services.BuildServiceParameters
import org.testcontainers.containers.PostgreSQLContainer

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        //      ...
        //      Required dependencies to start testcontainers and do the migration during the build.
        classpath 'org.testcontainers:postgresql:1.19.3'
        classpath 'org.liquibase:liquibase-core:4.24.0'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'nu.studer.jooq' version '8.2.1'
    id 'org.liquibase.gradle' version '2.2.2'
}

group = 'ru.just'
version = '0.0.1-SNAPSHOT'

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

java {
    sourceCompatibility = '21'
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

sourceSets {
    main {
        java {
            srcDir 'build/generated-src/jooq'
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.guava:guava:33.2.1-jre'
    implementation 'org.json:json:20240303'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'jakarta.persistence:jakarta.persistence-api'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    jooqGenerator "org.postgresql:postgresql"

    liquibaseRuntime 'org.liquibase:liquibase-core'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:3.0.2'
    liquibaseRuntime 'info.picocli:picocli:4.6.1'
    liquibaseRuntime 'org.postgresql:postgresql'
}

// Here we register service for providing our database during the build.
Provider<PostgresService> dbContainerProvider = project.getGradle()
        .getSharedServices()
        .registerIfAbsent("postgres", PostgresService.class, {})

def dbContainer = dbContainerProvider.get().container
String dbUsername = dbContainer.username
String dbPassword = dbContainer.password
String jdbcUrl = dbContainer.jdbcUrl

test {
    useJUnitPlatform()

    //  This is only necessary if you want to reuse container for the tests.
    usesService dbContainerProvider
    doFirst {
        systemProperty('spring.datasource.url', jdbcUrl)
        systemProperty('spring.datasource.username', dbUsername)
        systemProperty('spring.datasource.password', dbPassword)
    }
}

liquibase {
    activities {
        update {
            changelogFile 'src/main/resources/db/changelog/db.changelog-master.xml'
            url jdbcUrl
            username dbUsername
            password dbPassword
        }
    }
}

afterEvaluate {
//  For jOOQ to run we always need for flyway to be completed before.
    generateJooq.dependsOn update

    generateJooq.doFirst {
        jooq {
            configurations {
                main {
                    generationTool {
                        jdbc {
                            driver = "org.postgresql.Driver"
                            url = jdbcUrl
                            user = dbUsername
                            password = dbPassword
                        }
                    }
                }
            }
        }
    }
}

jooq {
    version = dependencyManagement.importedProperties['jooq.version']
    edition = JooqEdition.OSS
    configurations {
        main {
            generationTool {
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }
                    target {
                        packageName = 'ru.just.banners'
                        directory = 'build/generated-src/jooq/main'
                    }
                }
            }
        }
    }
}

/**
 * Build service for providing database container.
 */
abstract class PostgresService implements BuildService<BuildServiceParameters.None>, AutoCloseable {
    private final PostgreSQLContainer container

    PostgresService() {
    //        Services are initialized lazily, on first request to them, so we start container immediately.
        container = new PostgreSQLContainer("postgres:16-alpine")
                .withReuse(false)
                .withDatabaseName("banners")
                .withUsername("postgres")
                .withPassword("admin")
        container.start()
    }

    @Override
    void close() {
    //        Ensure to stop container in the end
        container.stop()
    }

    PostgreSQLContainer getContainer() {
        return container
    }
}
